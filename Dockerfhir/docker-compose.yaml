
x-kong-config:
  &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-database
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: mykongpassword

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false
    ipam:
      config:
        - subnet: 172.1.1.0/24

services:

  ################################################
  # Kong components (Kong & PostgreSQL Database) #
  ################################################

  kong-migrations:
    image: kong:3.5
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database

  kong-migrations-up:
    image: kong:3.5
    command: kong migrations up && kong migrations finish
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - kong-database

  kong:
    image: kong:3.5
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000, 0.0.0.0:8443 ssl}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_TRACING_INSTRUMENTATIONS: "request"
    networks:
      - kong-net
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "127.0.0.1:8002:8002/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
    security_opt:
      - no-new-privileges

  kong-database:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-mykongpassword}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
      
  iris-fhir:
    build: .
    container_name: iris-fhir
    restart: unless-stopped
    networks:
      - kong-net
    ports:
      - "8080:52773"  # Map local port 8080 to IRIS web port 52773
      - "1972:1972"  # Map local port 1972 to iris for health superserver port 1972
    volumes:
      - ./data:/data  # Map local 'data' directory to '/data' inside container
    environment:
      ISC_DATA_DIRECTORY: /data/ifconfig
      ISC_CPF_MERGE_FILE: /merge/CMF.cpf
    entrypoint: ["/iris-main"]
    depends_on:
      - kong

    #############################################


  swaggerui:
    image: swaggerapi/swagger-ui:latest
    container_name: swaggerui
    ports: ["8081:8080"]
    environment:
      URLS: >-
        [{"name":"FHIR via Kong","url":"/swagger.json"}]
      URLS_PRIMARY_NAME: "FHIR via Kong"   # <- pick this one at startup
    volumes:
      - ./swagger.json:/usr/share/nginx/html/swagger.json:ro
    restart: unless-stopped
    depends_on:
      - kong
    